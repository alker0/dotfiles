#!/bin/sh

git_dir="$(git rev-parse --show-superproject-working-tree --show-toplevel | head -1)/.git"
hooks_dir="$git_dir/hooks"
if [ ! -d "$git_dir" ]; then
  echo '.git/ is missing' >&2
  exit 1
fi
pre_push_path="$hooks_dir/pre-push"
pre_push_org_path="${pre_push_path}.org"

now_prefix="from now"
check_mark='CHECK_FOR_GIT_NOW'

already_enabled_message='pre-push hook for git-now checking is already enabled.'

enable_check() {
  if [ ! -d "$hooks_dir" ]; then
    mkdir "$hooks_dir" || return 1
  fi

  (
    git_now_check_text="$(
      { cat <<EOF1 ; cat <<'EOF2'
#!/bin/sh

# $check_mark

now_prefix="$now_prefix"

EOF1

check_now_commit() {
  z40=0000000000000000000000000000000000000000

  while IFS=' ' read local_ref local_sha remote_ref remote_sha ; do
   if [ "$local_sha" != "$z40" ]; then
    if [ "$remote_sha" = "$z40" ]; then
     # New branch, examine all commits
     range="$local_sha"
    else
     # Update to existing branch, examine new commits
     range="${remote_sha}..$local_sha"
    fi

    # Check for git-now commits
    now_commit="$(git rev-list -n 1 --grep "^\[$now_prefix]" "$range")"
    if [ -n "$now_commit" ]; then
      {
        echo "$local_ref includes [$now_prefix], therefore the pushing is aborted."
        echo "Commit: $now_commit"
      } >&2
      return 1
    fi
   fi
  done
}

org_hook_path="${0}.org"
disable_message='pre-push hook for git-now checking has been disabled.'

if [ -f "$org_hook_path" ]; then
  tty_tmp="$(mktemp)"
  cat >"$tty_tmp"
  check_now_commit <"$tty_tmp"
  check_exit_code=$?
  if [ "$check_exit_code" -eq '0' ]; then
    mv -f "$org_hook_path" "$0" \
      && {
        echo "$disable_message"
        "$0" "$@" < "${tty_tmp:?}"
      }
    result_exit_code=$?
  else
    result_exit_code=$check_exit_code
  fi

  rm -f "$tty_tmp"
  exit $result_exit_code
else
  check_now_commit \
    && rm -f "$0" \
    && echo "$disable_message"
fi

EOF2
      }
    )"

    if [ -f "$pre_push_path" ]; then
      if grep -qE "$check_mark" "$pre_push_path" ; then
        echo "$already_enabled_message"
        return 0
      else
        mv "$pre_push_path" "$pre_push_org_path" || return $?
        echo "Original pre-push hook has been moved to $pre_push_org_path"
      fi
    fi

    echo "$git_now_check_text" >"$pre_push_path" \
      && chmod a+x "$pre_push_path" \
      && echo 'pre-push hook for git-now checking has been enabled.'
  )
}

get_parent() {
  git log -2 --pretty=format:'%d' --abbrev-commit \
    | tail -n 1 \
    | sed -e 's/(.*,//g;s/)//' \
    | tr -d ' '
}

get_now_log() {
  git log --pretty=oneline --grep="${now_prefix}" "$@"
}

show_options() {
  printf -- '--%s\n' \
    amend \
    disable-check \
    help
    log \
    only-title \
    rebase \
    with-diff-filenames \
    with-diff-contents
}

message="[${now_prefix}] $(date '+"%F %T"')"

case "$1" in
  '') git commit -m "$message" && enable_check
    ;;
  --help)
    show_options
    ;;
  --amend)
    if git log --pretty=oneline -1 \
         | cut -d " " -f 2- \
         | grep -q "^\[${now_prefix}]"
    then
      git commit --amend -m "$message" \
        && enable_check \
        | { 
          grep -v "$already_enabled_message" || :
        }
    else
      echo 'previous commit is not git-now commit.' >&2
      exit 1
    fi
    ;;
  --disable-check)
    if {
      [ -f "$pre_push_path" ] \
        && grep -qvE "$check_mark" "$pre_push_path"
      } then
      if [ -f "$pre_push_org_path" ]; then
        mv -f "$pre_push_org_path" "$pre_push_path"
      else
        rm -f "$pre_push_path"
      fi
    fi
    ;;
  --log)
    shift
    if [ "_$2" = _--only-id ]; then
      shift
      get_now_log "$@" | cut -d ' ' -f 1
    else
      get_now_log "$@"
    fi
    ;;
  --only-title)
    git commit -m "${message}" \
      && enable_check
    ;;
  --with-diff-filenames)
    printf "${message}\n\n%s" "$(git diff --cached --name-only)" \
      | git commit -F - \
      && enable_check
    ;;
  --with-diff-contents)
    printf "${message}\n\n%s" "$(git diff --cached)" \
      | git commit -F - \
      && enable_check
    ;;
  --rebase)
    case "$2" in
      --all)
        rebase_option=
        ;;
      --from-parent)
        rebase_option="$(get_parent)..HEAD"
        ;;
      *[!0-9]*)
        {
          printf '%s\n' \
            "$1 is illegal option." \
            'Supproted option is number or:' \
          printf -- '--%s\n' \
              all \
              from-parent
        } >&2
        exit 1
        ;;
      *)
        rebase_option="-${2:-20}"
        ;;
    esac

    first_now_commit="$(get_now_log $rebase_option | tail -n 1 | cut -d ' ' -f 1)"
    initial_commit="$(git rev-list --max-parents=0 HEAD)"

    if [ -z "$first_now_commit" ]; then
      echo 'No git-now commits.'
    elif [ "$first_now_commit" = "$initial_commit" ]; then
      git rebase -i --root
    else
      git rebase -i "${first_now_commit}~"
    fi
    ;;
  *)
    {
      printf '%s\n' \
        "$1 is illegal option." \
        'Supproted options:' \
        && show_options
    } >&2
    exit 1
    ;;
esac
