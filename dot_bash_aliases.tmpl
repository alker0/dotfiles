{{ template "shell/bash-alias.sh" . }}{{ "\n" -}}

fenv() {
  (
    if [ -f "${FENV_EXCLUDES_PATH:=${XDG_CONIFG_HOME:-$HOME/.config}/fenv/fenv-excludes}" ]; then
      fenv_excludes="$(cat < "${FENV_EXCLUDES_PATH}" | tr -s '\n' | tr '\n' '|')"

      fenv_sed_pattern="$(cat <<EOP
      /[:]{2}|[CD]:[\\]|[CD]:$/b
      s/=([^:]+):/=*\n--------\1\n--------/
      s/:/\n--------/g
EOP
      )"

      env \
        | command grep -E -v "^(${fenv_excludes})=" \
        | sort \
        | sed -r "${fenv_sed_pattern}"
    else
      echo "${FENV_EXCLUDES_PATH} is missing or invalid"
      return 1
    fi
  )
}

unqh() {
  # inspect -> type unqh
  # delete -> unset -f unqh
  # list -> set | less
  history -a \
    && (
      reverse_command() {
        nl -n rz | sort -nr | cut -f 2-
      } \
        && {
          fixed_history_path="${TMPDIR:-/tmp/bash_uniq_history}"
          cat "${HISTFILE:=${HOME}/.bash_history}" \
            | reverse_command \
            | awk '!x[$0]++' \
            | reverse_command > "$fixed_history_path" \
            && {
              cat "$fixed_history_path" > "$HISTFILE"
              rm "$fixed_history_path"
            }
        }
    ) \
    && history -c \
    && history -r
}

if [ -n "$(command -v dpkg)" ] && [ -n "$(command -v apt-cache)" ]; then
  aptleaf() {
    dpkg -l \
      | command grep '^ii' \
      | tr -s ' ' \
      | cut -d ' ' -f 2 \
      | xargs -n5 -P$(nproc) sh -c "$(cat <<'EOF'
for x; do
  if [ -z "$(apt-cache rdepends --installed "$x" | tail -n +3)" ]; then
    echo "$x"
  else
    :
  fi
done
EOF
)" _
  }
fi

if [ -n "$(command -v chezmoi)" ]; then
  cmcd() {
    builtin cd "$(chezmoi source-path ${1:+"${1%/}"})"
  }
  cmxps() {
    chezmoi execute-template --init --promptString=$@
  }
  cmspc() {
    (
      source_dir="$(chezmoi source-path)"
      find "${source_dir:?}" -type f ! -path '*/.git/*' \
        | command grep -E "^$source_dir/"'([^/]+/)*(\.chezmoi[.deistv]|(create|modify|remove|run)_[^/]+$)' --color=none
    )
  }

  if [ -n "$(command -v fzf)" ]; then
    cmes() {
      (
        source_dir_prefix="$(chezmoi source-path)/"
        selected="$(cmspc \
          | command grep -v '/\.keep$' \
          | sed -e "s%^$source_dir_prefix%%" \
          | fzf)"
        [ -n "$selected" ] || return
        "${EDITOR:-vi}" "$source_dir_prefix$selected"
      )
    }
  fi

  if [ -n "$(command -v nix)" ]; then
    nix_profile_update_base() {
      (
        set -e

        flakes_dir="$HOME/.config/nix/flakes"
        chezmoi apply "$flakes_dir"
        builtin cd "$flakes_dir"
        git add .
        nix flake update --refresh --no-warn-dirty
      )
    }
    alias nixpub='nix_profile_update_base'
  fi
fi

if [ -n "$(command -v nix)" ]; then
  nix_register_userflakes() {
    nix registry add userflakes "$HOME/.config/nix/flakes"
  }

  nixup() {
    nix-channel --update \
      && {
        if [ -n "$(command -v nix_profile_update_base)" ]; then
          nix_profile_update_base
        else
          :
        fi
      } \
      && nix profile upgrade '.*'
  }

  nix_profile_list_short() {
    nix profile list | sed -E 's/^([0-9]*) *flake:nixpkgs#[^ ]+linux\./\1 /;s%(github:[^/]+/[^/]+|path:[^?]+)[^ ]+%\1%;s/flake:|\.[^ .]+-linux//g;s/#defaultPackage/#./;s/#packages\./#/'
  }
  alias nixpls='nix_profile_list_short'

  nixclean() {
    nix profile wipe-history && nix-collect-garbage
  }
fi

if [ -n "$(command -v docker)" ]; then
  # buildx local cache option
  dkbxlc() {
    (
      cache_dir="${2:-./cache/images/${1?}}"
      echo "--set ${1}.cache-from=type=local,src=${cache_dir} --set ${1}.cache-to=type=local,dest=${cache_dir}"
    )
  }
fi

if [ -n "$(command -v fnm)" ]; then
  fnmup() {
    fnm install --lts --log-level error \
      && fnm default lts-latest
  }
fi

if [ -n "$(command -v python3)" ]; then
  if [ -z "$(command -v python)" ]; then
    alias python='python3'
  fi

  pipup_user() {
    (
      set -e

      builtin cd "$HOME"

      if [ -n "$(command -v pseudo-tty)" ]; then
        pseudo_tty='pseudo-tty'
      else
        pseudo_tty=
      fi

      $pseudo_tty python3 -m pip install --user --upgrade pip \
        | { grep --color=never -v 'already satisfied' || [ $? -eq 1 ]; }

      pypip() {
        python3 -m pip "$@"
      }

      piplist="$(pypip list)"
      if ! echo "$piplist" | grep -q pipupgrade; then
        pypip install --user 'pipupgrade>=1.12.0'
      fi

      if [ -n "$(command -v pipupgrade)" ]; then
        piplist="$(pypip list)"
        if echo "$piplist" | grep pipupgrade | tr -s ' ' | cut -d' ' -f2 | grep -q '^0'; then
          pypip install --user --upgrade 'pipupgrade>=1.12.0'
        fi
        $pseudo_tty pipupgrade --latest --yes --user \
          | grep --color=never -v '| *INFO *|'
      fi
    )
  }

  pipup_current() {
    (
      set -e

      user_py="$(builtin cd "$HOME" && command -v python3)"
      current_py="$(command -v python3)"
      if [ ! "_$current_py" = "_$user_py" ]; then
        pypip() {
          python3 -m pip "$@"
        }

        pypip install --upgrade pip

        if [ -n "$(command -v pipupgrade)" ]; then
          piplist="$(pypip list)"
          if echo "$piplist" | grep pipupgrade | tr -s ' ' | cut -d' ' -f2 | grep -q '^0'; then
            pypip install --upgrade 'pipupgrade>=1.12.0'
          fi
          pipupgrade --latest --yes
        fi
      fi
    )
  }
fi

upgrade_all() {
  (
    set -e

    show_separator() {
      bar="${bar:=$(printf '\u2015%.0s' `seq 8`)}"
      echo -e "\e[1m$bar ${1?} $bar\e[0m"
    }

    if [ -n "$(command -v topgrade)" ]; then
      topgrade || return $?
    fi

    if [ -n "$(command -v nixup)" ]; then
      show_separator 'Nix'
      nixup || return $?
    fi

    if [ -n "$(command -v fnmup)" ]; then
      show_separator 'Fast Node Manager'
      fnmup || return $?
    fi

    if [ -n "$(command -v pipup_user)" ]; then
      show_separator 'Package Installer for Python'
      pipup_user || return $?
    fi
  )
}

rename_with_dir_and_suffix() {
  (
    filter_name="${1?Missing filter pattern for \`find -name\`}"
    suffix_pattern="${2?Missing suffix pattern for \`sed\`}"
    before_suffix_pattern="${3}"
    target_dir="${4:-$PWD}"
    filter_type="${5:-f}"

    find "$target_dir" -type "$filter_type" -name "$filter_name" | sed -E "s%^.*/([^/]+${before_suffix_pattern})(${suffix_pattern})\$%\\1\\2\\n\\2%" | xargs -L2 -P8 sh -c 'mv -v "${1?}/${2?}" "${1?}/${1##*/}-${3?}"' _ "$target_dir"
  )
}
