if locale -a | grep -qe ja_JP.utf8 ; then
  export LANG=ja_JP.utf8
else
  export LANG=C
fi

{{  range .data.env.list }}
{{-   if hasKey . "expands"}}
{{-     $expands := (list) }}
{{-     range .expands }}
{{-       if eq . "home" }}
{{-         $expands = append $expands "${HOME}" }}
{{-       else if eq . "config" }}
{{-         $expands = append $expands "${XDG_CONFIG_HOME:-$HOME/.config}"  }}
{{-       else if eq . "data" }}
{{-         $expands = append $expands "${XDG_CONFIG_HOME:-$HOME/.local/share}" }}
{{-       else if eq . "cache" }}
{{-         $expands = append $expands "${XDG_CONFIG_HOME:-$HOME/.cache}" }}
{{-       end }}
{{-     end }}
{{-     printf "export %s" .name }}={{ template "array/printf" (dict "format" .format "expands" $expands "quote" "double") }}
{{    else }}
{{-     printf "export %s" .name }}={{ template "array/printf" (dict "format" .format "quote" (contains " " .format | ternary "single" "")) }}
{{    end }}
{{- else -}}
{{- end -}}

if [ -z "$(command -v brew)" ]; then
  eval "$(
    linuxbrew_path=/home/linuxbrew/.linuxbrew/bin/brew
    if [ -f "$linuxbrew_path" ] && [ -x "$linuxbrew_path" ] ; then
      "$linuxbrew_path" shellenv
    fi
  )"
fi

bash_profile_load_with_filecheck() {
  if [ -f "$1" ]; then
    . "$1"
  fi
}

bash_profile_load_with_filecheck "$HOME/.nix-profile/etc/profile.d/nix.sh"

read_link_posix() {
  (
    ls_dl_result="$(command ls -dl "$1")"
    case "$ls_dl_result" in
    *-\>\ /*/*)
      followed_path="${ls_dl_result##*-> }"
      cd "${followed_path%/*}"
      read_link_posix "${followed_path##*/}"
      ;;
    *-\>\ */*)
      followed_path="${1%/*}/${ls_dl_result##*-> }"
      cd "${followed_path%/*}"
      read_link_posix "${followed_path##*/}"
      ;;
    *-\>\ *)
      read_link_posix "${ls_dl_result##*-> }"
      ;;
    #'') ;;
    *)
      if [ -n "${1##/*}" ]; then
        echo "$PWD/$1"
      else
        echo "$1"
      fi
      ;;
    esac
  )
}

if [ -n "$(command -v java)" ] && [ -z "${JAVA_HOME%%${WSLENV:+/mnt/[a-z]/*}}" ]; then
  export JAVA_HOME="$(
    cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/shell-config"
    java_home_cache="$cache_dir/java-home"
    if [ -f "$java_home_cache" ]; then
      head -n 1 $java_home_cache && exit
    fi

    java_bin_path="$(sh -c 'command -v java')"
    [ -n "$java_bin_path" ] || exit 0

    followed_java_bin_path="$(read_link_posix "$java_bin_path")"
    [ -x "$followed_java_bin_path" ] || exit 0

    followed_java_home_dir="${followed_java_bin_path%/bin/java}"
    [ "$followed_java_bin_path" != "$followed_java_home_dir" ] || exit 0

    if [ ! -d "$cache_dir" ]; then
      mkdir -p "$cache_dir"
    fi
    echo "$followed_java_home_dir" >"$java_home_cache"
    echo "$followed_java_home_dir"
  )"
  if [ -d "$JAVA_HOME" ]; then
    export PATH="$JAVA_HOME/bin:$PATH"
  else
    unset JAVA_HOME
  fi
fi

for sdk_tools_path in 'cmdline-tools/latest/bin/sdkmanager' 'platform-tools/adb'; do
  if [ -x "$ANDROID_SDK_ROOT/$sdk_tools_path" ]; then
    export PATH="$ANDROID_SDK_ROOT/${sdk_tools_path%/*}:$PATH"
  fi
done

if [ -n "$(command -v flutter)" ]; then
  if [ -n "$WSLENV" ]; then
    export ADB_SERVER_SOCKET="tcp:$(command grep 'nameserver' /etc/resolv.conf | cut -d ' ' -f 2):5037"
    if [ ! -x "$CHROME_EXECUTABLE" ]; then
      unset CHROME_EXECUTABLE
    fi
  fi
fi

if [ -n "$(command -v go)" ]; then
  export PATH="${GOPATH:-$HOME/go}/bin:$PATH"
fi

#if [ "$(command -v python)" == "$HOME/.nix-profile/bin/python" ]; then
#  eval "$(
#    venv_global="${XDG_DATA_HOME:-$HOME/.local/share}/virtualenv/global"
#    venv_global_bin="$venv_global/bin" 
#    venv_global_activate="$venv_global_bin/activate" 
#    if [ ! -f "$venv_global_activate" ]; then
#      python -m venv "$venv_global" >&2 || exit $?
#      "$venv_global_bin/python" -m pip install --quiet --upgrade pip
#      "$venv_global_bin/pip" install --quiet --upgrade wheel
#      "$venv_global_bin/pip" install --quiet --upgrade virtualenvwrapper
#    fi
#    cat <<EOF
#. '$venv_global_activate' \
#  && HOOK_VERBOSE_OPTION='-q' . '$venv_global_bin/virtualenvwrapper.sh' -q
#EOF
#  )"
#
#  #for np in ${NIX_PROFILES:-$HOME/.nix-profile} ; do
#  #  export LD_LIBRARY_PATH="$np/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
#  #done
#  #for np in $(
#  #  if [ -n "$(command -v nix)" ]; then
#  #    echo "$(nix env --raw 'nixpkgs#stdenv.cc.cc.lib' 2>/dev/null)"
#  #  fi
#  #  ) ${NIX_PROFILES:-$HOME/.nix-profile} ; do
#  #  export LD_LIBRARY_PATH="$np/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
#  #done
#fi

case $- in
  *i*)
    bash_profile_load_with_filecheck  "$HOME/.bashrc"
    ;;
  *)
    bash_profile_load_with_filecheck "$HOME/.bash_aliases"
    ;;
esac
