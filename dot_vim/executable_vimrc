augroup vimrc
  autocmd!
augroup END

if 1
  " ---- disable netrw ----
  let g:loaded_netrw = 1
  let g:loaded_netrwPlugin = 1

  " ---- manage plugins ----
  function! PackInit() abort
    if &compatible
      set nocompatable
    endif

    packadd minpac

    call minpac#init()

    call minpac#add('k-takata/minpac', #{type: 'opt'})

    const sed_text =<< trim EOT
      s%(match +goTplIdentifier [^/]*/[^/]*)\\s([^/]*/)%\1[:blank:]\2%i
      s%(match +goTplIdentifier .+])(\+\\)%\1\\\2%i
    EOT

    call minpac#add('fatih/vim-go', #{do: {->system("sed -i -E '" . sed_text . "' syntax/gotexttmpl.vim")}})
  endfunction

  command! PackUpdate call PackInit() | call minpac#update()
  command! PackClean call PackInit() | call minpac#clean()
  command! PackStatus packadd minpac | call minpac#status()
endif

filetype indent off

" ---- encoding ----
set encoding=utf-8

set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8

" ---- move ----
" Wrap cursor on Left/Right side
set whichwrap+=<,>,h,l,[,]

set virtualedit+=block

set scrolloff=5

augroup vimrc
  autocmd VimEnter,VimResized * set scroll=5
augroup END

" ---- search ----
set ignorecase

set smartcase

" Loop on search after bottom
set wrapscan

" ---- editor ----
set tabstop=2

set shiftwidth=2

set expandtab

set autoindent

set smartindent

" Deletable things by <BS>
" Start => Start position of insert
set backspace=indent,eol,start

set wildmenu

"set nrformats=alpha
set nrformats=

set ttimeout
set timeoutlen=500
set ttimeoutlen=100

" Include multi byte caractors to format target
set formatoptions+=mM

augroup vimrc
  " Disable auto comment out
  "set formatoptions-=ro
  autocmd FileType * set formatoptions-=ro
augroup END

" ---- visual ----
set wrap

set showmatch

set hlsearch

" Show invisible charactor
set list

" Trail => Space on line end
" Extends => Show when there are on over right side caractors
set listchars=tab:>-,extends:<,trail:-,eol:<

set showbreak=+++\ 

" Line number
set number

set nocursorline

set nocursorcolumn

set title

" set term=xterm-256color

if exists('+syntax')
  colorscheme desert
endif

augroup vimrc
  autocmd SourcePre * ++once filetype plugin on | syntax on
augroup END

" ---- bottom info ----
" Cursor info
set ruler

set laststatus=2

set cmdheight=2

" Show normal mode command typing
set showcmd

if exists('+statusline')
  function! s:defineStatusLineColor()
    " set highlight for statusline
    if &term =~ '256'
      hi StatusLineFileName term=bold ctermfg=23 ctermbg=206 gui=bold guifg=DarkMagenta guibg=LightGreen
      hi StatusLineSeparator term=bold ctermfg=NONE ctermbg=Blue gui=bold guifg=NONE guibg=Blue
      hi StatusLineFileInfo term=bold ctermfg=LightGreen ctermbg=DarkBlue gui=bold guifg=LightGreen guibg=DarkBlue
      hi StatusLineCursorInfo term=bold ctermfg=DarkBlue ctermbg=DarkYellow gui=bold guifg=DarkBlue guibg=DarkYellow
      hi StatusLineFileType term=bold ctermfg=Yellow ctermbg=DarkMagenta gui=bold guifg=Yellow guibg=DarkMagenta
    else
      hi StatusLineFileName term=bold ctermfg=Black ctermbg=Yellow gui=bold guifg=DarkMagenta guibg=LightGreen
      hi StatusLineSeparator term=bold ctermfg=NONE ctermbg=Blue gui=bold guifg=NONE guibg=Blue
      hi StatusLineFileInfo term=bold ctermfg=LightGreen ctermbg=DarkBlue gui=bold guifg=LightGreen guibg=DarkBlue
      hi StatusLineCursorInfo term=bold ctermfg=DarkBlue ctermbg=DarkYellow gui=bold guifg=DarkBlue guibg=DarkYellow
      hi StatusLineFileType term=bold ctermfg=Yellow ctermbg=DarkMagenta gui=bold guifg=Yellow guibg=DarkMagenta
    endif
  endfunction

  augroup vimrc
    autocmd VimEnter,ColorScheme * call s:defineStatusLineColor()
    autocmd BufReadPost,BufWritePost,FileWritePost,FileChangedShellPost * let b:statuslinetime = '(' . strftime("%H:%M %d/%m/%Y", getftime(expand("%:p"))) . ')'
  augroup END

  " filename[help][modified][readonly]
  let &statusline='%#StatusLineFileName# %f%1(%h%m%r%)'
  " [fileformat option]
  let &statusline .= '%#StatusLineSeparator# %#StatusLineFileInfo#[%{&ff}]'
  " (timestamp)
  let &statusline .= '%#StatusLineSeparator# %#StatusLineFileInfo#%{exists("b:statuslinetime") ? b:statuslinetime : ""}'
  " right align
  let &statusline .= '%#StatusLineSeparator#%='
  " line,column N%[filetype]
  let &statusline .= '%#StatusLineCursorInfo#%13(%l,%2c (%3p%%)%) %#StatusLineFileType#  %y  '
  let &statusline .= '%#Normal#'
endif

" ---- side effect files ----
set nobackup

set noundofile

" default -> ' < s h
" other -> ! % / : @ c f n r
"set viminfo=

" ---- terminal ----
if &shell =~ '\v.*/(|[bd]a|[ackz]|tc|fi)sh'
  let &shell.=' --login'
endif

" ---- key mapping ----
if 1
  let mapleader = "\<Space>"
endif

map <Nul> <C-Space>
map! <Nul> <C-Space>

" <F13> ... <F19>
set t_F3=[1;2*P
set t_F4=[1;2*Q
set t_F5=[1;2*R
set t_F6=[1;2*S
set t_F7=[15;2;*~
set t_F8=[17;2;*~
set t_F9=[18;2;*~

nnoremap <Leader>r gT
nnoremap <Leader>t gt

nnoremap <silent> <Leader>n :nohlsearch<CR>

nnoremap <Leader>d "_d
nnoremap <Leader>p "0p

nnoremap <C-f> <C-f>zz
nnoremap <C-b> <C-b>zz

nnoremap & :&&<CR>
xnoremap & :&&<CR>

xnoremap il g_o0
xnoremap al $o0
onoremap <silent> il :normal vil<CR>
onoremap <silent> al :normal val<CR>

inoremap jj <C-[>

inoremap <C-b> <C-g>U<Left>
inoremap <C-f> <C-g>U<Right>
